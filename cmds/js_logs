#! /usr/bin/env python3
import click
from types import SimpleNamespace
from Jumpscale import j


def get_client(redis_host, redis_port, redis_secret):
    client = j.clients.logger.get("js_logs")
    if redis_host:
        client.redis_host = redis_host
    if redis_port:
        client.redis_port = redis_port
    if redis_secret:
        client.redis_secret = redis_secret

    return client


def common_options(function):
    click.option("--redis-host", default=None, help="redis host (defaults to localhost)")(function)
    click.option("--redis-port", default=6379, help="redis port (defaults to 6379)")(function)
    click.option("--redis-secret", default=None, help="redis secret (empty by default)")(function)
    click.option("-a", "--appname", default="init", help="application name, default: init")(function)
    return function


@click.group()
@common_options
@click.pass_context
def cli(ctx, redis_host, redis_port, redis_secret, appname):
    ctx.obj = SimpleNamespace()
    ctx.obj.client = get_client(redis_host, redis_port, redis_secret)
    ctx.obj.appname = appname


@cli.command()
@click.pass_obj
def tail(ctx_obj):
    """
    tail logs from session
    """
    ctx_obj.client.tail(appname=ctx_obj.appname)


@cli.command()
@click.argument("all", default=False, required=False)
@click.pass_obj
def count(ctx_obj, all=None):
    """
    tail logs from session
    """
    print(ctx_obj.client.count(appname=ctx_obj.appname, all=all))


@cli.command()
@click.option("--file_path", default=None, help="filter by logsfilepath logs come from , defaults to None")
@click.option("--level", default=None, help="filter by log level , defaults to None")
@click.option("--data", default=None, help="filter by log data , defaults to None")
@click.option("--cat", default="", help="filter by category, defaults to empty string")
@click.option("--message", default="", help="filter by string")
@click.option("--processid", default=None, help="filter by process id, defaults to None")
@click.option("--time_from", default=None, help="filter by time within a span from specific time, defaults to None")
@click.option("--time_to", default=None, help="filter by time within a span until specific time , defaults to None")
@click.option("--id_from", default=None, help="filter by logs id from , defaults to None")
@click.pass_obj
def find(
    ctx_obj,
    file_path=None,
    level=None,
    data=None,
    context=None,
    cat="",
    message="",
    processid=None,
    time_from=None,
    time_to=None,
    id_from=None,
):
    """
    filter by appname, filepath, category, message, pid and/or time ..
    """
    logs = ctx_obj.client.find(
        appname=ctx_obj.appname,
        file_path=file_path,
        level=level,
        data=data,
        cat=cat,
        context=context,
        message=message,
        processid=processid,
        time_from=time_from,
        time_to=time_to,
        id_from=id_from,
    )
    ctx_obj.client._print(logs)


if __name__ == "__main__":
    cli()
