#! /usr/bin/env python3
import click

from Jumpscale import j


def get_client(redis_host, redis_port, redis_secret):
    client = j.clients.alerts.get("js_alerts")
    if redis_host:
        client.redis_host = redis_host
    if redis_port:
        client.redis_port = redis_port
    if redis_secret:
        client.redis_secret = redis_secret

    return client


def common_options(function):
    click.option("--redis-host", default=None, help="redis host (defaults to localhost)")(function)
    click.option("--redis-port", default=6379, help="redis port (defaults to 6379)")(function)
    click.option("--redis-secret", default=None, help="redis secret (empty by default)")(function)
    return function


def alerts_get(client, identifier=None, nr=None, die=False):
    res = []

    def add(identifier=None, alert_id=None, die=True):
        alert = client.get(identifier=identifier, alert_id=alert_id, die=die, new=False)
        if not alert:
            if identifier:
                msg = f"Alert of identifier:'{identifier}' cannot be found"
            else:
                msg = f"Alert of alert_id:'{alert_id}' cannot be found"
            if die:
                raise j.exceptions.Input(msg)
            else:
                print(msg)
        else:
            res.append(alert)

    if not identifier or identifier.strip() == "" or identifier.lower() == "last":
        data = j.core.db.get("alertslast")
        if data:
            items = j.data.serializers.msgpack.loads(data)
        else:
            items = None
        if not items:
            print("there are no last items, do a find first.")
            return []
        if nr:
            nr = int(nr)
            if len(items) > nr:
                items = items[-nr:]
        for alert_id in items:
            add(alert_id=alert_id, die=die)
        j.core.db.delete("alertslast")
    else:
        try:
            alert_id = int(identifier)
            identifier = None
        except:
            alert_id = None

        add(identifier=identifier, alert_id=alert_id, die=die)
    return res


@click.group()
@common_options
@click.pass_context
def cli(ctx, redis_host, redis_port, redis_secret):
    ctx.obj = get_client(redis_host, redis_port, redis_secret)


@cli.command()
@click.pass_obj
def count(client):
    """
    counts the alerts
    """
    print(f"Count of alerts is {client.count()}")


@cli.command()
@click.option("--cat", default="", help="filter by category, defaults to empty string")
@click.option("--message", default="", help="filter by string")
@click.option("--pid", default=None, help="filter by process id, defaults to None")
@click.option("--time-from", default=None, help="alert.time_last needs to be > than specified time_from example -4h")
@click.option("--time-to", default=None, help="alert.time_last needs to be < than specified time_from example -20m")
@click.option("--app", default=None, help="part of application name")
@click.pass_obj
def find(client, cat="", message="", pid=None, time_to=None, time_from=None, app=None):
    """
    filter by category, message, pid and/or time
    """
    alerts = client.find(cat, message, pid, time_to=time_to, time_from=time_from, appname=app)
    r = []
    res = {}
    for alert in alerts:
        if alert.alert_id > 0:
            if alert.alert_id not in r:
                r.append(alert.alert_id)
                res[alert.alert_id] = alert
            # else:
            #     raise RuntimeError("allert has same id")

    r.sort()
    alerts2 = []
    for i in r:
        alerts2.append(res[i])

    data = j.data.serializers.msgpack.dumps(r)
    j.core.db.set("alertslast", data)

    client.alerts_list(alerts2)


@cli.command()
@click.option("-nr", default=None, help="nr of alerts to get")
@click.argument("identifier", nargs=-1)
@click.pass_obj
def get(client, identifier, nr=None):
    """
    show alert with given identifier
    if not specified then will be the last one(s)
    if nr specified will return the X last ones

    """
    if identifier:
        identifier = identifier[0]
    if identifier == ():
        identifier = None

    for alert in alerts_get(client, identifier, nr=nr):
        client.alert_print(alert)


@cli.command()
@click.argument("identifier", nargs=-1)
@click.option("-a", "--all", is_flag=True, help="delete all")
@click.pass_obj
def delete(client, identifier, all=False):
    """
    delete alert(s)
    if not specified then will be all the last ones as found in find

    """
    if identifier:
        identifier = identifier[0]
    if identifier == ():
        identifier = None

    if all:
        client.delete_all()

        return

    for alert in alerts_get(client, identifier):
        print(" - delete: %s" % client._alert_oneline(alert))
        client.delete(alert)


if __name__ == "__main__":
    cli()
