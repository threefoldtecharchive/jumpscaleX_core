#! /usr/bin/env python3
import click

from Jumpscale import j


def get_client(redis_host, redis_port, redis_secret):
    client = j.clients.alerts.get("js_alerts")
    if redis_host:
        client.redis_host = redis_host
    if redis_port:
        client.redis_port = redis_port
    if redis_secret:
        client.redis_secret = redis_secret

    return client


def common_options(function):
    click.option("--redis-host", default=None, help="redis host (defaults to localhost)")(function)
    click.option("--redis-port", default=6379, help="redis port (defaults to 6379)")(function)
    click.option("--redis-secret", default=None, help="redis secret (empty by default)")(function)
    return function


@click.group()
@common_options
@click.pass_context
def cli(ctx, redis_host, redis_port, redis_secret):
    ctx.obj = get_client(redis_host, redis_port, redis_secret)


@cli.command()
@click.pass_obj
def list(client):
    """
    print all alerts
    """
    alerts = [item[1] for item in client.list()]
    client.print_list(alerts)


@cli.command()
@click.pass_obj
def reset(client):
    """
    erase the alerts in the DB
    """
    client.reset()


@cli.command()
@click.pass_obj
def count(client):
    """print count of alerts"""
    print(f"Count of alerts is {client.count()}")


@cli.command()
@click.option("--cat", default="", help="filter by category, defaults to empty string")
@click.option("--message", default="", help="filter by string")
@click.option("--pid", default=None, help="filter by process id, defaults to None")
@click.option("--time", default=None, help="filter by time within a span of first to last seen, defaults to None")
@click.pass_obj
def find(client, cat="", message="", pid=None, time=None):
    """
    filter by category, message, pid and/or time
    """
    alerts = client.find(cat, message, pid, time)
    client.print_list(alerts)


@cli.command()
@click.argument("identifier")
@click.pass_obj
def show(client, identifier):
    """
    show alert with given identifier
    """
    try:
        alert = client.get(identifier, die=True)
        client.print(alert)
    except j.exceptions.NotFound:
        print(f"Alert of '{identifier}' cannot be found")


@cli.command()
@click.argument("identifier")
@click.pass_obj
def delete(client, identifier):
    """
    delete alert with given identifier
    """
    client.delete(identifier)


if __name__ == "__main__":
    cli()
