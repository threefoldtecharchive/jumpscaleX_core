#!/usr/bin/env python3

import sys

# lets always monkey patch
if True or "-p" in sys.argv:
    from gevent import monkey

    monkey.patch_all(subprocess=False)
    # monkey.patch_select()
    # monkey.patch_thread()
    # monkey.patch_socket()
    # monkey.patch_time()

import sys
from Jumpscale import j


# j.tools.bash.get().profile.locale_check()


import argparse
import pudb

# default is 12 lines or get from config
LOGGER_PANEL_LINES = j.core.myenv.config.get("LOGGER_PANEL_NRLINES", 12)

parser = argparse.ArgumentParser()
parser.add_argument("-q", "--quiet", default=False, action="store_true", help="Turn off debug mode and logging")
parser.add_argument(
    "-r", "--reset", default=False, action="store_true", help="Reset system BCDB and all encryption keys (DANGEROUS)"
)

parser.add_argument("-s", "--slave", default=None, action="store_true", help="force as slave")
parser.add_argument("-m", "--master", default=None, action="store_true", help="force as slave")

# parser.add_argument("--init", default=False, action="store_true", help="Initialize a jumpscale system")

parser.add_argument(
    "--instruct",
    default=None,
    help="if you want to instruct kosmos to execute instructions see documentation kosmos_instruct.md .",
)
parser.add_argument(
    "--ignore_error", default=False, action="store_true", help="will continue instructions even if error"
)

parser.add_argument("--debug", default=False, action="store_true", help="will go in debug session when error")
parser.add_argument(
    "--logging-panel-lines",
    type=int,
    default=LOGGER_PANEL_LINES,
    help="set the line count for logging panel (0 means disabled), default: -1 (auto)",
)

parser.add_argument("-p", "--patch", default=False, action="store_true", help="Monkeypatch the system for gevent")

options, args = parser.parse_known_args()

if options.slave:
    j.data.bcdb._master_set()
    print("SLAVE")

if options.master:
    j.data.bcdb._master_set(False)
    print("MASTER")

if options.quiet:
    j.shell()

if options.reset:
    j.shell()

if options.debug:
    j.application.debug = True
    j.core.myenv.debug = True
    j.core.myenv.config["LOGGER_INCLUDE"] = ["*"]
    j.tools.logger.reload()
    j.tools.logger.debug = True


if j.core.myenv.config.get("LOGGER_PANEL_NRLINES") != options.logging_panel_lines:
    j.core.myenv.config["LOGGER_PANEL_NRLINES"] = options.logging_panel_lines
    j.core.myenv.config_save()


def instruction_process(ddict):

    res = {}

    res["method"] = ddict.pop("instruction_method")
    res["name"] = ddict.pop("instruction_name", "")
    res["description"] = ddict.pop("instruction_description", "")
    res["kwargs"] = ddict

    res["error"] = False

    j.core.tools.log("instruction run:", level=20, data=res)

    try:
        method = eval(res["method"])
    except Exception as e:
        extype, value, tb = sys.exc_info()
        j.core.tools.log(e, tb=tb, level=40)
        # traceback.print_exc()
        if options.debug:
            pudb.post_mortem(tb)
            sys.exit(1)
        res["error"] = True
        res["error_msg"] = str(e)
        res["error_cat"] = "could not load method"
        return 1, res

    try:
        result = method(**ddict)
    except Exception as e:
        extype, value, tb = sys.exc_info()
        j.core.tools.log(e, tb=tb, level=40)
        # traceback.print_exc()
        if options.debug:
            pudb.post_mortem(tb)
            sys.exit(1)
        res["error"] = True
        res["error_msg"] = str(e)
        res["error_cat"] = "could not execute method"
        return 1, res

    try:
        res["result"] = j.data.serializers.json.dumps(result)
    except Exception as e:
        res["result"] = "COULDNOTSERIALIZE"

    return 0, res


def instructions_result_print(res):
    print("\n\n####TOMLRESULT####\n\n")
    print(j.data.serializers.toml.dumps(res))


if options.instruct:
    config = j.data.serializers.toml.load(options.instruct)
    res = {}
    for key, vals in config.items():
        if key.startswith("j."):
            # shortcutway
            for val in vals:
                val["instruction_method"] = key
                rc, resultone = instruction_process(val)
                if key not in res:
                    res[key] = []
                res[key].append(resultone)
                if rc > 0 and not options.ignore - error:
                    print("ERROR, could not execute all instructions")
                    instructions_result_print(res)
                    sys.exit(1)
        elif key.lower() == "instruction":
            for val in vals:
                rc, resultone = instruction_process(val)
                if key not in res:
                    res[key] = []
                res[key].append(resultone)
                if rc > 0 and not options.ignore_error:
                    print("ERROR, could not execute all instructions")
                    instructions_result_print(res)
                    sys.exit(1)
        else:
            raise RuntimeError(
                "cannot parse the instructionfile, see: /sandbox/code/github/threefoldtech/jumpscaleX/docs/Internals/kosmos_instruct.md"
            )
    print(instructions_result_print(res))
    sys.exit(0)

# if options.init:
#     j.data.nacl.configure(name="default", interactive=True, generate=False)


if len(args) == 1:
    j.application.interactive = True
    if "(" not in args[0] and j.sal.fs.exists(args[0]):
        from importlib.machinery import SourceFileLoader

        mymodule = SourceFileLoader("main", args[0]).load_module()
    else:
        toexec = args[0]
        toexec = toexec.strip("'\" ").strip("'\" ")
        exec(toexec, globals(), j._locals_get({}))
else:
    j.data.bcdb.system  # needed to make sure we have bcdb running, needed for code completion
    j.application.interactive = True
    n = j.data.nacl.get(load=False)  # important to make sure private key is loaded
    if n.load(die=False) is False:
        j.application.check()
        # print("ERROR: CANNOT LOAD THE PRIVATE KEY FROM THE FILESYSTEM")
        # print("")
        # j.core.myenv.secret_set()
        # if n.load(die=False) is False:
        #     print("there is prob something wrong with private key, OH MY GOD, I HOPE YOU STILL HAVE THE WORDS.")
        #     n.configure()

    j.shell(loc=False, locals_=locals(), globals_=globals())
